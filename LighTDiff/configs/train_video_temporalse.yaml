name: LighTDiff_Video_TSE_Train
model_type: LighTDiff
num_gpu: 1
manual_seed: 42
is_train: true

# ===================== Datasets（直接读取 mp4） =====================
datasets:
  train:
    name: train
    type: VideoWindowMP4Dataset      # 已在 lightdiff/data/lol_dataset.py 注册
    phase: train
    root_lr: E:/ELEC5020/LighTDiff-main/LighTDiff-main/dataset/video/train/low
    root_hr: E:/ELEC5020/LighTDiff-main/LighTDiff-main/dataset/video/train/high
    lr_prefix: "lum_contrast"
    clip_len: 5
    center_index: 2
    crop_size: [256, 256]            # 同步裁剪到 256×256
    hflip: true
    vflip: false
    use_shuffle: true
    num_worker_per_gpu: 4
    batch_size_per_gpu: 1            # 先用1更稳（4070Ti 友好）
    prefetch_mode: ~
    pin_memory: false
    persistent_workers: false

  val:
    name: validation
    type: VideoWindowMP4Dataset
    phase: val
    root_lr: E:/ELEC5020/LighTDiff-main/LighTDiff-main/dataset/video/val/low
    root_hr: E:/ELEC5020/LighTDiff-main/LighTDiff-main/dataset/video/val/high
    lr_prefix: "lum_contrast"
    clip_len: 5
    center_index: 2
    crop_size: ~
    hflip: false
    vflip: false
    num_worker_per_gpu: 2
    batch_size_per_gpu: 1

# ===================== Networks（沿用你原配置） =====================
network_unet:
  type: TLBNet
  in_channel: 6
  out_channel: 3
  inner_channel: 64
  norm_groups: 32
  channel_mults: [1, 2, 4]
  attn_res: [16]
  res_blocks: 2
  dropout: 0.2
  divide: 16
  use_tlu: True

network_global_corrector:
  type: SpatialControlModule
  normal01: true

network_ddpm:
  type: GaussianDiffusion
  image_size: 256
  channels: 3
  conditional: true
  color_limit: -1
  structure: [1, 2, 2, 2]

ddpm_schedule:
  schedule: "linear"
  n_timestep: 2000
  linear_start: !!float 1e-6
  linear_end: !!float 1e-2

# ===================== Paths（保持与你原来一致） =====================
path:
  pretrain_network_g: ~
  param_key_g: params
  strict_load_g: False
  pretrain_network_d: ~
  resume_state: ~
  ignore_resume_networks: ['network_identity']
  # visualization / experiments_root 等由框架按默认规则生成

# ===================== Train（沿用你原配置 + 打开 Temporal SE） =====================
train:
  use_temporal_se: true        # <<<< 开启时间融合（我们新增的）
  cs_on_shift: true
  vis_train: true
  vis_num: 150
  train_type: lighT_structure
  t_border: 1000
  input_mode: crop
  crop_size: [256, 256]

  optim_g:
    type: Adam
    lr: !!float 1e-4

  scheduler:
    type: MultiStepLR
    milestones: [20000, 45000, 90000]
    gamma: 0.3

  total_iter: 100000
  warmup_iter: -1  # no warm up

  early_stop:
    metric: lpips                 # 监控的指标（需出现在 val.metrics 中）
    better: lower                 # LPIPS 越低越好
    patience: 3                   # 连续 3 次没有提升就停止
    min_delta: 0.0005             # 最小提升幅度
    dataset: validation           # （可选）指定验证集名称

# ===================== Validation（沿用你原配置） =====================
val:
  split_log: false
  fix_seed: true
  color_gamma: 1.0
  use_up_v2: true
  structure: [1, 2, 2, 2]
  ddim_eta: !!float 1.0
  ddim_timesteps: 4
  use_kind_align: false
  cal_all: true
  show_all: true
  val_freq: !!float 5000
  save_img: true

metrics:
    psnr:
      type: calculate_psnr
      crop_border: 0
      test_y_channel: false
    ssim:
      type: calculate_ssim          # ← 用标准名
      crop_border: 0                # ← 必填
      test_y_channel: false         # ← 建议加
    lpips:
      type: calculate_lpips_lol

# ===================== Logger / Dist =====================
logger:
  print_freq: 100
  save_checkpoint_freq: !!float 5000
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

dist_params:
  backend: nccl
  port: 29500

find_unused_parameters: true
